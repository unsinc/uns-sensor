- name: Prep for the docker environment
  apt:
    name:
      - ca-certificates
      - gnupg

- name: Update the APT repository
  apt:
    update_cache: yes
    force_apt_get: yes
  changed_when: False

- name: Add Docker GPG apt Key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add repository into sources list
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
    state: present
    filename: docker

- name: Initial Sensor Configuration
  apt:
    name:  
      - auditd
      - htop
      - nano
      - psmisc
      - net-tools
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - python3-pip
    
- name: Create a logical volume sns with the rest of the available space
  lvol:
    vg: ubuntu-vg
    lv: sns
    size: 100%FREE
  ignore_errors: true

- name: Create /sns directory
  file:
    path: /sns
    state: directory
    mode: '0755'

- name: Create xfs filesystem on ubuntu--vg-sns
  filesystem:
    fstype: ext4
    dev: /dev/mapper/ubuntu--vg-sns

- name: Mount sns volume
  mount:
    path: /sns
    src: /dev/mapper/ubuntu--vg-sns
    fstype: ext4
    boot: true
    state: mounted

- name: Stop Docker for migration
  shell: "sudo service docker stop"

- name: Move the Docker Files 
  shell: "sudo cp -a /var/lib/docker/ /sns/docker/"

- name: Create docker directory if it does not exist
  file:
    path: /etc/docker 
    state: directory
    owner: root
    group: root

- name:  Move Docker to /sns
  shell:
    cmd: |
         sudo echo "{
              \"data-root\": \"/sns/docker\" 
          }" > /etc/docker/daemon.json

- name: Migrate the Docker data
  shell: "sudo cp -a /var/lib/docker/ /sns/" 

- name: Start Docker after migration
  shell: "sudo service docker start"

- name: Install Suricata-Update
  shell: "pip install --upgrade suricata-update"

- name: Upgrade all packages used by the sensor
  apt: upgrade=dist force_apt_get=yes

- name: Collect the highest 5 interface names on the sensor
  shell: "ansible localhost -m setup -a filter=ansible_interfaces | sort | grep -e ens -e enp | tail -5 | sed 's/ //g' | sed 's/\"//g' | sed 's/,//g' > /home/uns/span_interfaces.txt"

- name: Set all monitoring interfaces to optional
  shell: "netplan set ethernets.{{ item }}.optional=true"
  loop: "{{ lookup('file', '/home/uns/span_interfaces.txt').splitlines() }}"

- name: Create Suricata Log directory if it does not exist
  file:
    path: /var/log/suricata 
    state: directory
    owner: docker
    group: docker

- name: Copy the docker-compose file to the Docker directory
  copy:
    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/docker-compose.yml
    dest: /sns/docker/docker-compose.yml

- name: Create Suricata directory if it does not exist
  file:
    path: /sns/IDS/suricata 
    state: directory
    owner: docker
    group: docker

- name: Create Suricata Update-Rules directory if it does not exist
  file:
    path: /var/lib/suricata/rules
    state: directory
    owner: root
    group: suricata

# Uncomment the section below for IDS Multi-Tenency
#- name: Create Suricata eth1 directory if it does not exist
#  file:
#    path: /sns/IDS/suricata/eth1/rules 
#    state: directory
#    owner: docker
#    group: docker
#
#- name: Create Suricata eth2 Rules directory if it does not exist
#  file:
#    path: /sns/IDS/suricata/eth2/rules 
#    state: directory
#    owner: docker
#    group: docker
#
#- name: Create Suricata eth3 Rules directory if it does not exist
#  file:
#    path: /sns/IDS/suricata/eth3/rules 
#    state: directory
#    owner: docker
#    group: docker
#
#- name: Create Suricata eth4 Rules directory if it does not exist
#  file:
#    path: /sns/IDS/suricata/eth4/rules 
#    state: directory
#    owner: docker
#    group: docker
#
#- name: Create Suricata eth5 Rules directory if it does not exist
#  file:
#    path: /sns/IDS/suricata/eth5/rules 
#    state: directory
#    owner: docker
#    group: docker

- name: Create Suricata Update-Rules Update directory if it does not exist
  file:
    path: /var/lib/suricata/update
    state: directory
    owner: root
    group: suricata

- name: Copy the Dockerfile
  copy:
    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/dockerfile
    dest: /sns/docker/dockerfile

- name: Copy the Suricata Configuration file to the Suricata directory
  copy:
    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/suricata.yaml
    dest: /sns/IDS/suricata/suricata.yaml 

# Uncomment the section below for IDS Multi-Tenency
#- name: Copy the Suricata eth1 Configuration file to the Suricata directory
#  copy:
#    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/eth1.yaml
#    dest: /sns/IDS/suricata/eth1/eth1.yaml
#
#- name: Copy the Suricata eth2 Configuration file to the Suricata directory
#  copy:
#    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/eth2.yaml
#    dest: /sns/IDS/suricata/eth2/eth2.yaml
#
#- name: Copy the Suricata eth3 Configuration file to the Suricata directory
#  copy:
#    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/eth3.yaml
#    dest: /sns/IDS/suricata/eth3/eth3.yaml
#
#- name: Copy the Suricata eth4 Configuration file to the Suricata directory
#  copy:
#    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/eth4.yaml
#    dest: /sns/IDS/suricata/eth4/eth4.yaml
#
#- name: Copy the Suricata eth5 Configuration file to the Suricata directory
#  copy:
#    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/eth5.yaml
#    dest: /sns/IDS/suricata/eth5/eth5.yaml

- name: Copy the Suricata Classification file to the Suricata directory
  copy:
    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/classification.config
# Comment the line below in IDS Multi-Tenency
    dest: "/sns/IDS/suricata/classification.config"
# Uncomment the section below for IDS Multi-Tenency
#    dest: "/sns/IDS/suricata/{{ item }}/classification.config"
#  with_items:
#      - eth1
#      - eth2
#      - eth3
#      - eth4
#      - eth5

- name: Copy the Suricata Reference file to the Suricata directory
  copy:
    src: ~/.ansible/pull/{{ansible_nodename}}/configuration/reference.config
# Comment the line below in IDS Multi-Tenency
    dest: "/sns/IDS/suricata/reference.config"
# Uncomment the section below for IDS Multi-Tenency
#    dest: "/sns/IDS/suricata/{{ item }}/reference.config"
#  with_items:
#      - eth1
#      - eth2
#      - eth3
#      - eth4
#      - eth5

- name: Create the needed span interfaces
  shell: "docker network create -d macvlan -o macvlan_mode=passthru -o parent={{ item }} {{ item }}_span"
  loop: "{{ lookup('file', '/home/uns/span_interfaces.txt').splitlines() }}"
  ignore_errors: true

- name: Adding ansible to the Suricata group
  shell: "sudo usermod -a -G suricata ansible"

- name: Get the initial set of Suricata Rules
  shell: "suricata-update"

- name: Copy the Suricata Rules file to the Suricata eth1 Rules directory
  copy:
    src: /var/lib/suricata/rules/
# Comment the line below in IDS Multi-Tenency
    dest: "/sns/IDS/suricata/rules/"
# Uncomment the section below for IDS Multi-Tenency
#    dest: "/sns/IDS/suricata/{{ item }}/rules/"
#  with_items:
#      - eth1
#      - eth2
#      - eth3
#      - eth4
#      - eth5

- name: Run the docker container
  shell: 
    cmd: |
        docker compose -f /sns/docker/docker-compose.yml up -d 

- name: Attach the new SPAN interfaces to the IDS
  shell: "docker network connect {{ item }}_span IDS"
  loop: "{{ lookup('file', '/home/uns/span_interfaces.txt').splitlines() }}"